<%
  const tableModelNamespace = name + 'Table'
  const operatorModelNamespace = name + 'Operator'
  const hasOperator = data.table.operators.length > 0
  const operatorMap = data.table.operators.reduce((_, operator) => ({
    ..._,
    [operator]: true,
  }), {})
  const hasPagination = data.table.pagination
-%>

import React, {
  useMemo,
  <% if (hasOperator) { -%>
  useCallback,
  <% } -%>
} from 'react'
import { useModel } from 'steer'
import { useDidMount, useWillUnmount } from 'beautiful-react-hooks'
import { dispatcher } from '@opcjs/zoro'
import Table from '@/components/table/table'
<% if (hasOperator) { -%>
import Actions from '@/components/actions/actions'
<% } -%>

export default function () {
  const {
    dataSource,
    <% if (hasPagination) { %>
    pagination,
    <% } %>
  } = useModel(({ <%= tableModelNamespace %> }) => <%= tableModelNamespace %>)
  const loading = useModel(({ loading }) => ({
    query: loading.effect['<%= tableModelNamespace %>/query'] || false,
  }))

  <% if (operatorMap.edit) { -%>
  const handleEdit = useCallback(() => {
    dispatcher.<%= operatorModelNamespace %>.edit()
  }, [])
  <% } -%>

  <% if (operatorMap.view) { -%>
  const handleView = useCallback(() => {
    dispatcher.<%= operatorModelNamespace %>.view()
  }, [])
  <% } -%>

  <% if (operatorMap.delete) { -%>
  const handleDelete = useCallback(() => {
    dispatcher.<%= operatorModelNamespace %>.delete()
  }, [])
  <% } -%>

  <% if (hasOperator) { -%>
  const handleRow = useCallback((record) => {
    return {
      onClick: () => dispatcher.<%= operatorModelNamespace %>.setActiveRow(record)
    }
  }, [])
  <% } -%>

  <% if (hasPagination) { %>
  const handleChange = useCallback((pagination) => {
    dispatcher.<%= tableModelNamespace %>.change({ pagination })
  }, [])
  <% } %>

  useDidMount(() => {
    dispatcher.<%= tableModelNamespace %>.query()
  })

  useWillUnmount(() => {
    dispatcher.<%= tableModelNamespace %>.clear()
  })

  <% if (hasOperator) { -%>
  const renderActions = useCallback(() => (
    <Actions size="small">
      <% if (operatorMap.edit) { -%>
      <Actions.Action onClick={handleEdit}>编辑</Actions.Action>
      <% } -%>
      <% if (operatorMap.view) { -%>
      <Actions.Action onClick={handleView}>详情</Actions.Action>
      <% } -%>
      <% if (operatorMap.delete) { -%>
      <Actions.Action danger onClick={handleDelete}>删除</Actions.Action>
      <% } -%>
    </Actions>
  ), [
    <% if (operatorMap.edit) { -%>
    handleEdit,
    <% } -%>
    <% if (operatorMap.view) { -%>
    handleView,
    <% } -%>
    <% if (operatorMap.delete) { -%>
    handleDelete,
    <% } -%>
  ])
  <% } -%>

  return useMemo(() => {
    return (
      <Table
        rowKey="id"
        loading={loading.query}
        dataSource={dataSource}
        <% if (hasOperator) { -%>
        onRow={handleRow}
        <% } -%>
        <% if (hasPagination) { %>
        pagination={pagination}
        onChange={handleChange}
        <% } %>
      >
        <Table.Column title="姓名" width={200} dataIndex="name" fixed="left" />
        <Table.Column title="年龄" dataIndex="age" />
        <Table.Column title="性别" dataIndex="gender" />
        <Table.Column title="生日" width={300} dataIndex="birthday" />
        <Table.Column title="家庭住址" width={300} dataIndex="address" ellipsis />
        <% if (hasOperator) { -%>
        <Table.Column
          title="操作"
          fixed="right"
          width={130}
          dataIndex="action"
          render={renderActions}
        />
        <% } -%>
      </Table>
    )
  }, [
    loading,
    dataSource,
    <% if (hasOperator) { -%>
    renderActions,
    handleRow,
    <% } -%>
    <% if (hasPagination) { %>
    handleChange,
    pagination,
    <% } %>
  ])
}
